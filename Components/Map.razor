<h3>Live Map</h3>

<div id="map-container">
    <div id="map"></div>
</div>

<div class="mt-3">
    <p><strong>Current Position:</strong> @mouseLat, @mouseLng</p>
    <p><strong>Selected Target:</strong> @(targetLat is not null ? $"{targetLat}, {targetLng}" : "None")</p>

    <button class="btn btn-primary" @onclick="ConfirmTarget" disabled="@targetConfirmed || targetLat is null">
        Confirm Target
    </button>

    @if (targetConfirmed)
    {
        <p class="text-success mt-2">Target locked.</p>
    }
</div>

<style>
    #map-container {
        width: 100%;
        height: auto;
        max-height: 250px;
        aspect-ratio: 3 / 2;
        border: 2px solid #444;
        border-radius: 5px;
        overflow: hidden;
    }

    #map {
        width: 100%;
        height: 100%;
    }
</style>

@code {
    [Inject] IJSRuntime JS { get; set; } = default!;

    double mouseLat;
    double mouseLng;

    double? targetLat;
    double? targetLng;

    bool targetConfirmed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeLeafletMap", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void UpdateMousePosition(double lat, double lng)
    {
        if (!targetConfirmed)
        {
            mouseLat = lat;
            mouseLng = lng;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void SetTargetPosition(double lat, double lng)
    {
        if (!targetConfirmed)
        {
            targetLat = lat;
            targetLng = lng;
            StateHasChanged();
        }
    }

    void ConfirmTarget()
    {
        targetConfirmed = true;
    }
}