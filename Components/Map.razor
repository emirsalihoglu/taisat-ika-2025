@inject IJSRuntime JS
@inject WebSocketService WsService
@using System.Text.Json;

<h3>Live Map</h3>

<div id="map-container">
    <div id="map"></div>
</div>

<div class="mt-3">
    <p><strong>Current Position:</strong> @mouseLat, @mouseLng</p>
    <p><strong>Selected Target:</strong> @(targetLat is not null ? $"{targetLat}, {targetLng}" : "None")</p>

    <button class="btn btn-primary me-2" @onclick="ConfirmTarget" disabled="@targetConfirmed || targetLat is null">
        Confirm Target
    </button>

    @if (targetConfirmed)
    {
        <p class="text-success mt-2">Target locked.</p>
        <button class="btn btn-outline-danger mt-1" @onclick="ClearTarget">Clear Target</button>
    }

    <hr />

    <h5>Set Target Manually</h5>
    <div class="row g-2">
        <div class="col">
            <input type="number" class="form-control" step="any" @bind="manualLat" placeholder="Latitude" />
        </div>
        <div class="col">
            <input type="number" class="form-control" step="any" @bind="manualLng" placeholder="Longitude" />
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-primary" @onclick="SetManualTarget">Set Target</button>
        </div>
    </div>
</div>

<style>
    #map-container {
        width: 100%;
        height: auto;
        max-height: 250px;
        aspect-ratio: 3 / 2;
        border: 2px solid #444;
        border-radius: 5px;
        overflow: hidden;
    }

    #map {
        width: 100%;
        height: 100%;
    }
</style>

@code {
    double mouseLat;
    double mouseLng;

    double? targetLat;
    double? targetLng;

    double? manualLat;
    double? manualLng;

    bool targetConfirmed = false;

    double robotLat;
    double robotLng;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeLeafletMap", DotNetObjectReference.Create(this));
            WsService.RegisterHandler("/my_robot/gps", HandleOdom);
        }
    }

    [JSInvokable]
    public void UpdateMousePosition(double lat, double lng)
    {
        if (!targetConfirmed)
        {
            mouseLat = lat;
            mouseLng = lng;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void SetTargetPosition(double lat, double lng)
    {
        if (!targetConfirmed)
        {
            targetLat = lat;
            targetLng = lng;
            StateHasChanged();
        }
    }

    void ConfirmTarget()
    {
        targetConfirmed = true;
    }

    void ClearTarget()
    {
        targetConfirmed = false;
        targetLat = null;
        targetLng = null;

        _ = JS.InvokeVoidAsync("clearTargetMarker");
    }

    void SetManualTarget()
    {
        if (manualLat != null && manualLng != null)
        {
            targetLat = manualLat;
            targetLng = manualLng;
            targetConfirmed = false;

            _ = JS.InvokeVoidAsync("setManualMarker", targetLat.Value, targetLng.Value);
        }
    }

    void HandleOdom(byte[] data)
    {
        try
        {
            var json = Encoding.UTF8.GetString(data);
            var pos = JsonSerializer.Deserialize<Position>(json);

            if (pos is not null)
            {
                robotLat = pos.x;
                robotLng = pos.y;
                _ = JS.InvokeVoidAsync("updateRobotPosition", robotLat, robotLng);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ GPS verisi çözümleme hatası: {ex.Message}");
        }
    }

    class Position
    {
        public double x { get; set; }
        public double y { get; set; }
    }
}