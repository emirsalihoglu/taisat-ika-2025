@inject WebSocketService WsService
@inject IJSRuntime JS

<div class="camera-grid">
    <canvas id="frontCamCanvas" width="320" height="240" class="camera-canvas"></canvas>
    <canvas id="backCamCanvas" width="320" height="240" class="camera-canvas"></canvas>
    <canvas id="depthCamCanvas" width="320" height="240" class="camera-canvas"></canvas>
</div>

<style>
    .camera-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
        height: 100%;
    }

    .camera-canvas {
        width: 100%;
        height: auto;
        border: 1px solid #444;
        background-color: #000;
        border-radius: 6px;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        WsService.RegisterHandler("/my_robot/front_rgb_cam/image_color", async data =>
        {
            Console.WriteLine($"🎥 Front: {data.Length} bytes");
            await Draw("frontCamCanvas", data);
        });

        WsService.RegisterHandler("/my_robot/back_rgb_cam/image_color", async data =>
        {
            Console.WriteLine($"🎥 Back: {data.Length} bytes");
            await Draw("backCamCanvas", data);
        });

        WsService.RegisterHandler("/my_robot/depth_camera/image", async data =>
        {
            Console.WriteLine($"🎥 Depth: {data.Length} bytes");
            await Draw("depthCamCanvas", data);
        });
    }

    async Task Draw(string canvasId, byte[] rawData)
    {
        var base64 = Convert.ToBase64String(rawData);
        await JS.InvokeVoidAsync("drawRawRGB", canvasId, base64, 320, 240);
    }
}