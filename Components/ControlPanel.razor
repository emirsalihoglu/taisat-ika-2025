@inject WebSocketService WsService

<h3>Control Panel</h3>

<div class="control-wrapper d-flex flex-column justify-content-between h-100">
    <div class="control-grid">
        <button class="btn btn-secondary" @onclick='() => SendCommand("forward")'>↑</button>
        <div></div>
        <button class="btn btn-secondary" @onclick='() => SendCommand("backward")'>↓</button>
        <button class="btn btn-secondary" @onclick='() => SendCommand("left")'>←</button>
        <button class="btn btn-danger" @onclick='() => SendCommand("stop")'>⏹</button>
        <button class="btn btn-secondary" @onclick='() => SendCommand("right")'>→</button>
    </div>

    <div class="text-center mt-3">
        <button class="btn btn-warning me-3" @onclick="ToggleAutonomous">
            @(autonomousEnabled ? "Disable Autonomous" : "Enable Autonomous")
        </button>
        <span>
            Autonomous Mode:
            <strong class="@StatusClass">@StatusText</strong>
        </span>
    </div>
</div>

<style>
    .control-wrapper {
        height: 100%;
    }

    .control-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
        justify-items: center;
        align-items: center;
    }
</style>

@code {
    bool autonomousEnabled = false;

    async void SendCommand(string command)
    {
        Console.WriteLine($"Sent command: {command}");
        await WsService.SendCommandAsync("/cmd_vel", command); // <-- Topic adını gerekiyorsa değiştir
    }

    void ToggleAutonomous()
    {
        autonomousEnabled = !autonomousEnabled;
    }

    string StatusText => autonomousEnabled ? "Active" : "Inactive";
    string StatusClass => autonomousEnabled ? "text-success" : "text-danger";
}